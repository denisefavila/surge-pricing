version: '3.8'

services:
  app:
    build: .
    container_name: app
    ports:
      - 8000:8000
    depends_on:
      - redis
    networks:
      - surge_pricing_network
    environment:
      - REDIS_HOST=redis
      - PYTHONUNBUFFERED=1
    command: bash -c "/app/start_services.sh"
    volumes:
      - .:/app  # Map the current directory to /app in the container
  redis:
      image: redis:latest
      container_name: redis
      ports:
        - "6379:6379"
      networks:
        - surge_pricing_network
  redis_producer:
      build: .
      container_name: redis_producer
      depends_on:
        - redis
      networks:
        - surge_pricing_network
      environment:
        - REDIS_HOST=redis
        - REDIS_CHANNEL=driver_position_channel  # Nome do canal
        - PYTHONUNBUFFERED=1
        - PYTHONPATH=/app
      command: bash -c "/app/start_producer.sh"
      volumes:
        - .:/app
  redis_aggregator:
    build: .
    container_name: redis_aggregator
    depends_on:
      - redis
    networks:
      - surge_pricing_network
    environment:
      - REDIS_HOST=redis
      - REDIS_CHANNEL=driver_position_channel  # Nome do canal
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
    command: bash -c "/app/start_driver_positions_aggregator.sh"
    volumes:
      - .:/app

  redis_orders_aggregator:
    build: .
    container_name: redis_orders_aggregator
    depends_on:
      - redis
    networks:
      - surge_pricing_network
    environment:
      - REDIS_HOST=redis
      - REDIS_CHANNEL=order_channel  # Nome do canal
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
    command: bash -c "/app/start_orders_aggregator.sh"
    volumes:
      - .:/app

  redis_drivers_persister:
    build: .
    container_name: redis_drivers_persister
    depends_on:
      - redis
    networks:
      - surge_pricing_network
    environment:
      - REDIS_HOST=redis
      - REDIS_CHANNEL=order_channel  # Nome do canal
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
    command: bash -c "/app/start_driver_positions_persist.sh"
    volumes:
      - .:/app

  cassandra:
    image: cassandra:5.0.2
    container_name: cassandra
    ports:
      - "9042:9042"
    environment:
      CASSANDRA_CLUSTER_NAME: "Test Cluster"
      CASSANDRA_NUM_TOKENS: 256
      CASSANDRA_START_RPC: "true"
      CASSANDRA_LISTEN_ADDRESS: "127.0.0.1"  # Correct this to 0.0.0.0
      CASSANDRA_RPC_ADDRESS: "0.0.0.0"    # Keep this as 0.0.0.0
      CASSANDRA_BROADCAST_ADDRESS: "127.0.0.1"
    volumes:
      - cassandra_data_2:/var/lib/cassandra
    healthcheck:
      test: [ "CMD", "cqlsh", "-e", "DESCRIBE KEYSPACES" ]
      interval: 30s
      retries: 3
    networks:
      - surge_pricing_network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    ports:
      - "2181:2181"
    networks:
      - surge_pricing_network

  kafka:
    image: confluentinc/cp-kafka:5.5.1
    container_name: kafka
    environment:
      - KAFKA_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP= PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_LISTENER_NAME=PLAINTEXT
      - KAFKA_LISTENER_PORT=9092
      - KAFKA_LISTENER_INTER_BROKER_PROTOCOL=PLAINTEXT
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    ports:
      - '9092:9092'
      - '29092:29092'
    depends_on:
      - zookeeper
    networks:
      - surge_pricing_network

  kafka_producer:
    build: .
    container_name: kafka_producer
    depends_on:
      - kafka
    networks:
      - surge_pricing_network
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
    command: bash -c "/app/start_kafka_producer.sh"
    volumes:
      - .:/app
networks:
  surge_pricing_network:
    driver: bridge

volumes:
  cassandra_data_2:
